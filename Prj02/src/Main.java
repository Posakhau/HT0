
/*
* Написать каталогизатор mp3-файлов, который
  сканирует перечень указанных в командной строке каталогов
  с подкаталогами и создаёт HTML-документ в формате:

   Исполнитель1
    Альбом-1
     Название-1 Длительность-1 (Ссылка на локальный файл)
     Название-2 Длительность-2 (Ссылка на локальный файл)
    Альбом-2
     Название-1 Длительность-1 (Ссылка на локальный файл)
     Название-2 Длительность-2 (Ссылка на локальный файл)
   Исполнитель2
    Альбом-1
     Название-1 Длительность-1 (Ссылка на локальный файл)
     Название-2 Длительность-2 (Ссылка на локальный файл)
    Альбом-2
     Название-1 Длительность-1 (Ссылка на локальный файл)
     Название-2 Длительность-2 (Ссылка на локальный файл)

Также ваша программа должна обнаруживать и формировать два отдельных списка mp3-файлов
(и логировать их с помощью Log4j2):
1)	Полностью идентичных (по контрольной сумме), например:

Дубликаты-1:
- Полный путь к файлу 1.
- Полный путь к файлу 2.
- Полный путь к файлу 3.

Дубликаты-2:
- Полный путь к файлу A.
- Полный путь к файлу B.
- Полный путь к файлу C.

2)	Таких, у которых совпадают исполнитель, альбом и название композиции,
    даже если сами файлы различаются (контрольные суммы не совпадают), например:

Исполнитель A, Альбом X, Композиция N:
- Полный путь к файлу 1.
- Полный путь к файлу 2.
- Полный путь к файлу 3.

Исполнитель B, Альбом Y, Композиция M:
- Полный путь к файлу AAA.
- Полный путь к файлу BBB.
- Полный путь к файлу CCC.
- Полный путь к файлу DDD.

	В процессе выполнения этого задания максимальное внимание уделите
	обработке исключительных ситуаций (на уровне работы с файловой системой,
    на уровне анализа самих файлов и т.д. и т.п.)

* */



public class Main {



    public static void main(String []args) {

        //String[] testArray = {"C:\\TSK"};

            MP3_Scanner scanner = new MP3_Scanner(args);

    }
}



/*
     КОНЦЕПЦИЯ РЕШЕНИЯ

     Основную концепцию решения данной задачи следует разбить на несколько отдельных этапов.

     На первом этапе решения происходит формирование структуры данных для хранения файлов, из которых
     впоследствии изымается необходимая информация. Для выполнения этого этапа задействованы
     внешние библиотеки commons-io-2.6 (для работы с файловой системой) и tika-app-1.5 (для извлечения
     необходимой информации из тегов mp3-файлов).

     На втором этапе согласно заказанной в задаче структуры построена структура классов определенной
     иерархии. Основная суть задания заключается в том, чтобы на основании информации, извлеченной
     из одной структуры, построить совершенно другую структуру, иерархически с прошлой структурой
     абсолютно не связанную. Вся информация о файлах хранится в классе MP3_InfoContainer,к которому
     обращаются остальные классы по мере необходимости - Artist,Album,Duplicate,StrangeDuplicate.
     Основной объект класса MP3_Scanner создает объекты класса Artist, Duplicate, StrangeDuplicate.
     В свою очередь, объект класса Artist создает объект класса Album.

        MP3_Scanner
            - Artist
                -Album

            - Duplicate

            - StrangeDuplicate

     На третьем этапе каждый из объектов класса иерархии ниже возвращает информацию о себе
     объекту класса в иерархии выше, которая затем записывается в файл report.html

*/
